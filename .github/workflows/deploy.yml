name: Deploy DMARCDefense

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var="api_url=${{ secrets.API_URL }}" \
            -var="api_token=${{ secrets.API_TOKEN }}" \
            -var="secret_key=${{ secrets.SECRET_KEY }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="environment=${{ secrets.ENVIRONMENT }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' # Solo aplicar en la rama principal
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

  build_and_deploy:
    name: Build and Deploy
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dmarcdefense
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f docker/Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name dmarcdefense \
            --containers '{"dmarcdefense":{"image":"${{ steps.login-ecr.outputs.registry }}/dmarcdefense:${{ github.sha }}","environment":{"API_URL":"${{ secrets.API_URL }}","API_TOKEN":"${{ secrets.API_TOKEN }}","SECRET_KEY":"${{ secrets.SECRET_KEY }}"},"ports":{"8000":"HTTP"}}}' \
            --public-endpoint '{"containerName":"dmarcdefense","containerPort":8000,"healthCheck":{"path":"/login"}}'
